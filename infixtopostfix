#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <string.h>

#define MAX_SIZE 100

char postfix[MAX_SIZE];
char stack[MAX_SIZE];
char infix[MAX_SIZE];
int top = -1;

int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        
        case '/':
        case '*':
            return 2;
        
        case '^':
            return 3;
        
        default:
            return -1;
    }
}

int is_op(char op) {
    if (op == '+' || op == '-' || op == '/' || op == '*' || op == '^') {
        return 1;
    } else {
        return 0;
    }
}

void infixtopostfix(char infix[MAX_SIZE]) {
    int i, j = 0;
    for (i = 0; i < strlen(infix); i++) {
        if (infix[i] == ' ')
            continue;
        else if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            stack[++top] = infix[i];
        } else if (infix[i] == ')') {
            while (top > -1 && stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            top--;
        } else if (is_op(infix[i])) {
            while (top > -1 && (precedence(stack[top]) > precedence(infix[i]) ||
                                (precedence(stack[top]) == precedence(infix[i]) && infix[i] != '^')) &&
                   (stack[top] != '(')) {
                postfix[j++] = stack[top--];
            }
            stack[++top] = infix[i];
        }
    }
    while (top > -1) {
        if (stack[top] == '(') {
            top--;
            continue;
        } else {
            postfix[j++] = stack[top--];
        }
    }
    postfix[j] = '\0';
}

int main() {
    printf("Enter infix expression : ");
    fgets(infix, MAX_SIZE, stdin);
    infixtopostfix(infix);
    printf("Postfix expression : %s\n", postfix);
    return 0;
}

