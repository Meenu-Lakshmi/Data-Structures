#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct node {
    int data;
    struct node* prev;
    struct node* next;
};

struct node* create_node(int data) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->prev = NULL;
    newnode->next = NULL;
    return newnode;
}

void insertE(struct node** head, int data) {
    struct node* newnode = create_node(data);
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
    } else {
        if (*head == NULL) {
            *head = newnode;
            newnode->prev = newnode;  
            newnode->next = newnode;  
            return;
        }

        struct node* tail = (*head)->prev;
        tail->next = newnode;
        newnode->prev = tail;
        newnode->next = *head;
        (*head)->prev = newnode;
    }
}

void insertS(struct node** head, int data) {
    struct node* newnode = create_node(data);
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
    } else {
        if (*head == NULL) {
            *head = newnode;
            newnode->prev = newnode; 
            newnode->next = newnode; 
            return;
        }

        newnode->next = *head;
        newnode->prev = (*head)->prev;
        (*head)->prev->next = newnode;
        (*head)->prev = newnode;
        *head = newnode;
    }
}

void insertAtPos(struct node** head, int data, int position) {
    struct node* newnode = create_node(data);
    if (newnode == NULL) {
        printf("Memory allocation failed\n");
    } else {
        if (position == 1) {
            newnode->next = *head;
            newnode->prev = (*head)->prev;
            (*head)->prev->next = newnode;
            (*head)->prev = newnode;
            *head = newnode;
            return;
        }

        struct node* temp = *head;
        for (int i = 1; i < position - 1 && temp->next != *head; i++) {
            temp = temp->next;
        }

        if (temp == NULL) {
            printf("Position out of bounds\n");
            free(newnode);
            return;
        }

        newnode->next = temp->next;
        newnode->prev = temp;
        temp->next->prev = newnode;
        temp->next = newnode;
    }
}

void delete(struct node** head, int data) {
    struct node* temp = *head;
    struct node* prev = NULL;

    if (temp == NULL) {
        printf("List is empty\n");
    } else {
        do {
            if (temp->data == data) {
                if (prev == NULL) {
                    if (temp->next == *head) {
                        free(temp);
                        *head = NULL;
                        return;
                    } else {
                        (*head)->prev->next = temp->next;
                        temp->next->prev = (*head)->prev;
                        *head = temp->next;
                        free(temp);
                        return;
                    }
                } else {
                    prev->next = temp->next;
                    temp->next->prev = prev;
                    free(temp);
                    return;
                }
            }
            prev = temp;
            temp = temp->next;
        } while (temp != *head);
        printf("Element not found in the list\n");
    }
}

void display(struct node* head) {
    if (head == NULL) {
        printf("List is empty\n");
    } else {
        struct node* temp = head;
        do {
            printf("%d\n", temp->data);
            temp = temp->next;
        } while (temp != head);
    }
}

int main() {
    struct node* head = NULL;
    int choice, data, position;

    do {
        printf("\n1. Insert at the end (insertE)\n");
        printf("2. Insert at the beginning (insertS)\n");
        printf("3. Insert at a specific position (insertAtPos)\n");
        printf("4. Delete a node\n");
        printf("5. Display the list\n");
        printf("0. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                insertE(&head, data);
                break;

            case 2:
                printf("Enter data: ");
                scanf("%d", &data);
                insertS(&head, data);
                break;

            case 3:
                printf("Enter data: ");
                scanf("%d", &data);
                printf("Enter position: ");
                scanf("%d", &position);
                insertAtPos(&head, data, position);
                break;

            case 4:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                delete(&head, data);
                break;

            case 5:
                display(head);
                break;

            case 0:
                printf("Exiting...\n");
                break;

            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }

    } while (choice != 0);

    return 0;
}
