#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *lchild, *rchild;
};

struct node *create_node(int data) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->lchild = NULL;
    newnode->rchild = NULL;
    return newnode;
}

struct node *insert_node(struct node *node, int value) {
    if (node == NULL)
        return create_node(value);
    else if (value < node->data) {
        node->lchild = insert_node(node->lchild, value);
    } else if (value >= node->data) {
        node->rchild = insert_node(node->rchild, value);
    }
    return node;
}

struct node *find_min(struct node *node) {
    while (node->lchild != NULL) {
        node = node->lchild;
    }
    return node;
}

struct node *delete_node(struct node *root, int key) {
    if (root == NULL)
        return root;

    if (key < root->data) {
        root->lchild = delete_node(root->lchild, key);
    } else if (key > root->data) {
        root->rchild = delete_node(root->rchild, key);
    } else {
        // Node with only one child or no child
        if (root->lchild == NULL) {
            struct node *temp = root->rchild;
            free(root);
            return temp;
        } else if (root->rchild == NULL) {
            struct node *temp = root->lchild;
            free(root);
            return temp;
        }

        // Node with two children
        struct node *temp = find_min(root->rchild);
        root->data = temp->data;
        root->rchild = delete_node(root->rchild, temp->data);
    }
    return root;
}

void preorder(struct node *node) {
    if (node != NULL) {
        printf("%d\t", node->data);
        preorder(node->lchild);
        preorder(node->rchild);
    }
}

void inorder(struct node *node) {
    if (node != NULL) {
        inorder(node->lchild);
        printf("%d\t", node->data);
        inorder(node->rchild);
    }
}

void postorder(struct node *node) {
    if (node != NULL) {
        postorder(node->lchild);
        postorder(node->rchild);
        printf("%d\t", node->data);
    }
}

void level_order(struct node *root) {
    if (root == NULL)
        return;

    struct node *queue[100];
    int front = -1, rear = -1;
    queue[++rear] = root;

    while (front != rear) {
        struct node *temp = queue[++front];
        printf("%d\t", temp->data);

        if (temp->lchild != NULL)
            queue[++rear] = temp->lchild;

        if (temp->rchild != NULL)
            queue[++rear] = temp->rchild;
    }
}

int main() {
    struct node *root = NULL;
    root = insert_node(root, 50);
    insert_node(root, 30);
    insert_node(root, 20);
    insert_node(root, 40);
    insert_node(root, 70);
    insert_node(root, 60);
    insert_node(root, 80);

    printf("Preorder Traversal:\n");
    preorder(root);

    printf("\nInorder Traversal:\n");
    inorder(root);

    printf("\nPostorder Traversal:\n");
    postorder(root);

    printf("\nLevel Order Traversal:\n");
    level_order(root);

    // Delete a node (e.g., delete node with value 30)
    root = delete_node(root, 30);

    printf("\n\nAfter Deleting Node with Value 30:\n");
    printf("Inorder Traversal:\n");
    inorder(root);

    return 0;
}
